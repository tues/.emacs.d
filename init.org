#+title: PaweÅ‚ Bartkiewicz's Emacs configuration
#+startup: showeverything
#+property: header-args:emacs-lisp :tangle yes

* About this file

After many years of creating new =init.el= files from scratch on each machine I used (because old
ones somehow weren't portable and were so degenerate I didn't want to fix them) I finally decided
to organise my Emacs configuration properly. This is the result. It is heavily influenced by
[[https://github.com/sachac/.emacs.d/][Sacha Chua's Org mode-based .emacs.d]]. This is also my first foray into literate programming using
[[https://orgmode.org][Org mode]]. Even if not useful to anyone else, I do hope it will help me remember the purpose of each
elisp snippet I add here.

I'm starting by creating an almost empty Org file and keeping my old config as =legacy.el=.
I will slowly move code here over time.

* Header

Make sure we're using UTF-8. Also set Org's =:padline= to =no= here to avoid generating an empty
line at the beginning of the file (who would ever want to begin a file with an empty line?!).

#+begin_src emacs-lisp :padline no
  ;; -*- coding: utf-8 -*-
#+end_src

* Basic settings

** Remove visual clutter

I don't want all this clutter. Disable tool bars, menu bars and scroll bars.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

The startup screen is nice, but I don't need it.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** Security

Never use unsafe file local variables, especially =eval=.

#+begin_src emacs-lisp
  (setq enable-local-variables :safe
        enable-local-eval nil)
#+end_src

** Appearance

*** TODO Always start maximised [0/1]

Emacs is the most important thing I run on my computer. Of course I want it to occupy my whole
screen (at least one)!

#+begin_src emacs-lisp
  (toggle-frame-maximized)
#+end_src

 - [ ] Do this only for X. Doesn't make sense in console.

** Customisations

I don't want Emacs to automatically save customised variables in my =init.el=, because they will
be overriden by =org-babel-tangle=. Let's use a separate file (=custom.el=) instead.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

** Save last visited place

Automatically save last place visited in each file.

#+begin_src emacs-lisp
  (require 'saveplace)
  (save-place-mode t)
#+end_src

** Scrolling

Stop that annoying error when scrolling would result in cursor moving beyond buffer's boundaries.
Scroll to the top or bottom of the buffer instead.

#+begin_src emacs-lisp
  (setq scroll-error-top-bottom t)
#+end_src

When scrolling with =M-v= and =C-v= keep 5 lines of context visible (default is 2).

#+begin_src emacs-lisp
  (setq next-screen-context-lines 5)
#+end_src

** Show buffer boundaries

Display some symbols in windows' left fringes indicating where buffers start and end.

#+begin_src emacs-lisp
  (setq-default indicate-buffer-boundaries 'left
                indicate-empty-lines +1)
#+end_src

** Never insert tabs

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Show whitespace

#+begin_src emacs-lisp
  (require 'whitespace)
  (global-whitespace-mode)
#+end_src

Too much noise by default, we only want to see whitespace which shouldn't be there (like tabs and
lines which contain only spaces).

#+begin_src emacs-lisp
  (setq whitespace-style (quote (face tabs trailing space-before-tab empty space-after-tab tab-mark)))
#+end_src

(This doesn't seem to work) Disable showing whitespace for some specific major modes, e.g. the ones used by Magit:

#+begin_src emacs-lisp
  (setq global-whitespace-modes '(not magit-mode magit-status-mode magit-revision-mode magit-diff-mode))
#+end_src

https://www.reddit.com/r/emacs/comments/fmd2qo/disabling_globalwhitespacemode_in_magit_buffers/fl4o57c/

#+begin_src emacs-lisp
  (defun turn-off-whitespace-mode ()
    "Unconditionally turn off Whitespace mode."
    (whitespace-mode -1)
    (setq-local whitespace-style nil))

  (add-hook 'magit-section-mode-hook #'turn-off-whitespace-mode)
#+end_src

** Show column number

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Enable advanced commands

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
  (put 'magit-diff-edit-hunk-commit 'disabled nil)
  (put 'magit-edit-line-commit 'disabled nil)
#+end_src

Not sure about these, so keep them disabled:

#+begin_src emacs-lisp
  ;(put 'magit-clean 'disabled nil)
  ;(put 'dired-find-alternate-file 'disabled nil)
#+end_src

** Package

Load and activate =package.el=. Add some repositories (only =gnu= is available by default).

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (package-initialize)
#+end_src

*** Use-package

Install =use-package= if needed and load it. It makes installing dependencies easier.

#+begin_src emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

Always install packages if they are not installed yet.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

** IDO

#+begin_src emacs-lisp
  (use-package ido)
  (ido-mode)
  (ido-everywhere)
#+end_src

*** Vertical

#+begin_src emacs-lisp
  (use-package ido-vertical-mode)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

*** Flex matching

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
#+end_src

**** =flx=

This makes flex matching much better:

#+begin_src emacs-lisp
  (use-package flx-ido)
  (flx-ido-mode 1)
  (setq ido-use-faces nil)
#+end_src

*** =ido-completing-read+=

#+begin_src emacs-lisp
  (use-package ido-completing-read+)
  (ido-ubiquitous-mode 1)
#+end_src

*** Sort files by mtime

https://www.emacswiki.org/emacs/InteractivelyDoThings

Disabled, see [[*Sort files by name length][Sort files by name length]].

#+begin_src emacs-lisp
  (defun ido-sort-mtime ()
    (setq ido-temp-list
          (sort ido-temp-list
                (lambda (a b)
                  (time-less-p
                   (sixth (file-attributes (concat ido-current-directory b)))
                   (sixth (file-attributes (concat ido-current-directory a)))))))
    (ido-to-end  ;; move . files to end (again)
     (delq nil (mapcar
                (lambda (x) (and (char-equal (string-to-char x) ?.) x))
                ido-temp-list))))

  ;; (add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
  ;; (add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)
#+end_src

*** Sort files by name length

Use shortest candidates first so that I can always narrow the results by typing more characters.

Disabled because it doesn't seem to work with =flx-ido= anyway.

#+begin_src emacs-lisp
  (defun ido-sort-name-length ()
    (setq ido-temp-list
          (sort ido-temp-list
                (lambda (a b)
                  (> (length b) (length a)))))
    (ido-to-end  ;; move . files to end (again)
     (delq nil (mapcar
                (lambda (x) (and (char-equal (string-to-char x) ?.) x))
                ido-temp-list))))

  ;; (add-hook 'ido-make-file-list-hook 'ido-sort-name-length)
  ;; (add-hook 'ido-make-dir-list-hook 'ido-sort-name-length)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :init (setq projectile-use-git-grep t))
  (projectile-global-mode)
#+end_src

Since version 1.1, Projectile no longer sets =C-c p= as the default prefix, so we need to do
this manually:

#+BEGIN_SRC emacs-lisp
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** Perspective

#+begin_src emacs-lisp
  (use-package perspective)
  (persp-mode)
#+end_src

*** Selected perspective face

By default, =persp-selected-face= uses an ugly blue colour and no themes seem to override it,
so let's forcefully set foreground colour to =nil=, but make the face bold.

#+begin_src emacs-lisp
  (set-face-attribute 'persp-selected-face nil
                      :foreground nil
                      :weight 'bold)
#+end_src

*** Integration with Projectile

#+begin_src emacs-lisp
  (use-package persp-projectile)
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
    :commands company-indent-or-complete-common
    :bind (("\t" . company-indent-or-complete-common)))
#+end_src

** CRUX

"A Collection of Ridiculously Useful eXtensions".

#+begin_src emacs-lisp
  (use-package crux)
#+end_src

*** Transpose windows

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 4 t") 'crux-transpose-windows)
#+end_src

** Avy

#+begin_src emacs-lisp
  (use-package avy)
  (global-set-key (kbd "C-;") 'avy-goto-char-2)
#+end_src

** Shell

#+begin_src emacs-lisp
  (setq comint-prompt-read-only t)
#+end_src

* Git

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status magit-diff-buffer-file magit-log magit-blame
    :init (setq magit-revert-buffers nil)
    :bind (("C-c C-g s" . magit-status)
           ("C-c C-g d" . magit-diff-buffer-file)
           ("C-c C-g l" . magit-log)
           ("C-c C-g b" . magit-blame)))
#+end_src

** Use IDO for completion

#+begin_src emacs-lisp
  (setq magit-completing-read-function 'magit-ido-completing-read)
#+end_src

** TODO
 [ ] =magit-revert-buffers= is deprecated. Check alternatives and set something safe but more
convenient than =nil=.

* Org

#+begin_src emacs-lisp
  (use-package org)
#+end_src

** =org-store-link=

Handy when creating notes about some part of a program in an organised way.
=C-c l= to store current location, switch to an Org buffer, =C-c C-l= to paste the link.

#+begin_src emacs-lisp
  (require 'org)

  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** =org-capture=

This, on the other hand, is useful for taking notes at any time without interrupting your normal
workflow: =C-c c=, choose a template, note something down, =C-c C-c= to save the note to
=~/org/notes.org= and go back to where you left. You can later go to your =notes.org= file and
hit =C-c C-w= to refile your notes, i.e. move them to different sections/files.

#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** =org-reveal=

#+begin_src emacs-lisp
  (use-package ox-reveal)
#+end_src

* CSV

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

* Emojis

** Emojify

#+begin_src emacs-lisp
  (use-package emojify)

  (global-set-key (kbd "C-c e") 'emojify-insert-emoji)
#+end_src

* Htmlize

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

* Communication helpers

** Copy as format

Format selected code region as a snippet ready for pasting.

#+BEGIN_SRC emacs-lisp
  (use-package copy-as-format)
  (global-set-key (kbd "C-c w s") 'copy-as-format-slack)
  (global-set-key (kbd "C-c w g") 'copy-as-format-gitlab)
  (global-set-key (kbd "C-c w j") 'copy-as-format-jira)
#+END_SRC

** Git link

Copy link to current file/line from a Git repository. For private servers we need to configure
=git-link-remote-alist= and =git-link-commit-remote-alist= (see example below).

#+BEGIN_SRC emacs-lisp
  (use-package git-link)
  (global-set-key (kbd "C-c C-g C-l") 'git-link)

  ;; (eval-after-load 'git-link
  ;;   '(progn
  ;;      (add-to-list 'git-link-remote-alist
  ;;                   '("git\\.example\\.com" git-link-gitlab))
  ;;      (add-to-list 'git-link-commit-remote-alist
  ;;                   '("git\\.example\\.com" git-link-commit-gitlab))))
#+END_SRC

* Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet)
  (yas-global-mode t)
#+end_src

* Scala

** Scala-mode

#+begin_src emacs-lisp
  (use-package scala-mode)
#+end_src

*** Disable double indentation

=scala-mode= indents =extends=, =with= and =forSome= with an additional step. I don't want this.

#+begin_src emacs-lisp
  (setq scala-indent:double-indent-re
    (concat (regexp-opt '() 'words)
            "\\|:\\("  scala-syntax:after-reserved-symbol-re "\\)"))
#+end_src

*** Scaladoc indentation style

Use javadoc indentation style instead (all asterisks aligned to the first one).

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(scala-indent:use-javadoc-style t))
#+END_SRC

** Ensime

#+begin_src emacs-lisp
  ;;(use-package ensime)
#+end_src

** Metals

Based on https://scalameta.org/metals/docs/editors/emacs.html.

#+begin_src emacs-lisp
  ;; Enable scala-mode for highlighting, indentation and motion commands
  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
     ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
     (setq sbt:program-options '("-Dsbt.supershell=false"))
  )

  ;; Enable nice rendering of diagnostics like compile errors.
  (use-package flycheck
    :init (global-flycheck-mode))

  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-c v")
    :commands (lsp-find-references)
    :bind (:map lsp-mode-map
                ("C-c f" . lsp-format-buffer)
                ("M-?" . lsp-find-references)
                ("C-c C-v r" . lsp-find-references))
    ;; Optional - enable lsp-mode automatically in scala files
    :hook
    (scala-mode . lsp)
    (lsp-mode . lsp-lens-mode)
    :config
    (setq lsp-prefer-flymake nil)
    (setq lsp-file-watch-threshold 1024)
    (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.pants.d$")
    (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.pids$")
    (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\dist$")
    )

  ;; Add metals backend for lsp-mode
  (use-package lsp-metals
    :config
    ;; (setq lsp-metals-pants-targets "src/scala/co/actioniq/integrations:integrations_repo-lib src/scala/co/actioniq/tools/export_writer_test/testables:integrations_repo-testables")
    (setq lsp-metals-pants-targets "::")
    )

  ;; (use-package eglot)

  ;; Enable nice rendering of documentation on hover
  (use-package lsp-ui)

  ;; lsp-mode supports snippets, but in order for them to work you need to use yasnippet
  ;; If you don't want to use snippets set lsp-enable-snippet to nil in your lsp-mode settings
  ;;   to avoid odd behavior with snippets and indentation
  ;; Already enabled above.
  ;; (use-package yasnippet)

  ;; Use the Debug Adapter Protocol for running tests and debugging
  (use-package posframe
    ;; Posframe is a pop-up tool that must be manually installed for dap-mode
    )
  (use-package dap-mode
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode)
    )

  ;; ;; Use the Tree View Protocol for viewing the project structure and triggering compilation
  ;; (use-package lsp-treemacs
  ;;   :config
  ;;   (lsp-metals-treeview-enable nil)
  ;;   (setq lsp-metals-treeview-show-when-views-received nil)
  ;;   )
#+end_src

*** Workaround for interrupted regex-replace

https://emacs.stackexchange.com/a/47159

#+begin_src emacs-lisp
  (defun my-query-replace-regexp ()
    (interactive)
    (let ((after-change-functions nil)) ; empty when executing this func
      (call-interactively 'query-replace-regexp)))

  (define-key lsp-mode-map (kbd "C-M-%") 'my-query-replace-regexp)
#+end_src

* Misc

** Graphviz

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
#+end_src

* Presenting

** Global zoom

Use `C-M-=` and `C-M--` to adjust the height of the `default` face, which results in everything
getting bigger/smaller.

#+begin_src emacs-lisp
  (use-package default-text-scale)
  (default-text-scale-mode)
#+end_src

* To do

** Case converting

https://www.emacswiki.org/emacs/CamelCase

#+begin_src emacs-lisp
  (use-package string-inflection)
#+end_src
