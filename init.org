#+title: Pawe≈Ç Bartkiewicz's Emacs configuration
#+startup: showeverything
#+property: header-args:emacs-lisp :tangle yes

* About this file

After many years of creating new =init.el= files from scratch on each machine I used (because old
ones somehow weren't portable and were so degenerate I didn't want to fix them) I finally decided
to organise my Emacs configuration properly. This is the result. It is heavily influenced by
[[https://github.com/sachac/.emacs.d/][Sacha Chua's Org mode-based .emacs.d]]. This is also my first foray into literate programming using
[[https://orgmode.org][Org mode]]. Even if not useful to anyone else, I do hope it will help me remember the purpose of each
elisp snippet I add here.

I'm starting by creating an almost empty Org file and keeping my old config as =legacy.el=.
I will slowly move code here over time.

* Header

Make sure we're using UTF-8. Also set Org's =:padline= to =no= here to avoid generating an empty
line at the beginning of the file (who would ever want to begin a file with an empty line?!).

#+begin_src emacs-lisp :padline no
  ;; -*- coding: utf-8 -*-
#+end_src

* Basic settings

** Remove visual clutter

I don't want all this clutter. Disable tool bars, menu bars and scroll bars.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

The startup screen is nice, but I don't need it.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** Security

Never use unsafe file local variables, especially =eval=.

#+begin_src emacs-lisp
  (setq enable-local-variables :safe
        enable-local-eval nil)
#+end_src

** Appearance

*** TODO Always start maximised [0/1]

Emacs is the most important thing I run on my computer. Of course I want it to occupy my whole
screen (at least one)!

#+begin_src emacs-lisp
  (toggle-frame-maximized)
#+end_src

 - [ ] Do this only for X. Doesn't make sense in console.

** Customisations

I don't want Emacs to automatically save customised variables in my =init.el=, because they will
be overriden by =org-babel-tangle=. Let's use a separate file (=custom.el=) instead.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

** Save last visited place

Automatically save last place visited in each file.

#+begin_src emacs-lisp
  (require 'saveplace)
  (save-place-mode t)
#+end_src

** Scrolling

Stop that annoying error when scrolling would result in cursor moving beyond buffer's boundaries.
Scroll to the top or bottom of the buffer instead.

#+begin_src emacs-lisp
  (setq scroll-error-top-bottom t)
#+end_src

When scrolling with =M-v= and =C-v= keep 5 lines of context visible (default is 2).

#+begin_src emacs-lisp
  (setq next-screen-context-lines 5)
#+end_src

** Show buffer boundaries

Display some symbols in windows' left fringes indicating where buffers start and end.

#+begin_src emacs-lisp
  (setq-default indicate-buffer-boundaries 'left
                indicate-empty-lines +1)
#+end_src

** Show whitespace

#+begin_src emacs-lisp
  (require 'whitespace)
  (global-whitespace-mode t)
#+end_src

Too much noise by default, we only want to see whitespace which shouldn't be there (like tabs and
lines which contain only spaces).

#+begin_src emacs-lisp
  (setq whitespace-style (quote (face tabs trailing space-before-tab empty space-after-tab tab-mark)))
#+end_src

** Package

Load and activate =package.el=. Add some repositories (only =gnu= is available by default).

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (package-initialize)
#+end_src

*** Use-package

Install =use-package= if needed and load it. It makes installing dependencies easier.

#+begin_src emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

Always install packages if they are not installed yet.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

** IDO

#+begin_src emacs-lisp
  (use-package ido)
  (ido-mode)
  (ido-everywhere)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile)
  (projectile-global-mode)
#+end_src

** Perspective

#+begin_src emacs-lisp
  (use-package perspective)
  (persp-mode)
#+end_src

*** Selected perspective face

By default, =persp-selected-face= uses an ugly blue colour and no themes seem to override it,
so let's forcefully set foreground colour to =nil=, but make the face bold.

#+begin_src emacs-lisp
  (set-face-attribute 'persp-selected-face nil
                      :foreground nil
                      :weight 'bold)
#+end_src

*** Integration with Projectile

#+begin_src emacs-lisp
  (use-package persp-projectile)
#+end_src

** CRUX

"A Collection of Ridiculously Useful eXtensions".

#+begin_src emacs-lisp
  (use-package crux)
#+end_src

*** Transpose windows

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 4 t") 'crux-transpose-windows)
#+end_src

** Avy

#+begin_src emacs-lisp
  (use-package avy)
  (global-set-key (kbd "C-;") 'avy-goto-char-2)
#+end_src

* Git

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status magit-diff-buffer-file magit-log magit-blame
    :init (setq magit-revert-buffers nil)
    :bind (("C-c C-g s" . magit-status)
           ("C-c C-g d" . magit-diff-buffer-file)
           ("C-c C-g l" . magit-log)
           ("C-c C-g b" . magit-blame)))
#+end_src

** TODO
 [ ] =magit-revert-buffers= is deprecated. Check alternatives and set something safe but more
convenient than =nil=.

* Org

#+begin_src emacs-lisp
  (use-package org)
#+end_src

** =org-store-link=

Handy when creating notes about some part of a program in an organised way.
=C-c l= to store current location, switch to an Org buffer, =C-c C-l= to paste the link.

#+begin_src emacs-lisp
  (require 'org)

  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** =org-capture=

This, on the other hand, is useful for taking notes at any time without interrupting your normal
workflow: =C-c c=, choose a template, note something down, =C-c C-c= to save the note to
=~/org/notes.org= and go back to where you left. You can later go to your =notes.org= file and
hit =C-c C-w= to refile your notes, i.e. move them to different sections/files.

#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** =org-reveal=

#+begin_src emacs-lisp
  (use-package ox-reveal)
#+end_src

* Scala

** Scala-mode

#+begin_src emacs-lisp
  (use-package scala-mode)
#+end_src

*** Disable double indentation

=scala-mode= indents =extends=, =with= and =forSome= with an additional step. I don't want this.

#+begin_src emacs-lisp
  (setq scala-indent:double-indent-re
    (concat (regexp-opt '() 'words)
            "\\|:\\("  scala-syntax:after-reserved-symbol-re "\\)"))
#+end_src

* Load =legacy.el=

#+begin_src emacs-lisp :tangle yes
  (load "~/.emacs.d/legacy.el")
#+end_src
